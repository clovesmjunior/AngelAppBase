{
  "version": "2.2.17",
  "name": "appbasejs",
  "dependencies": {
    "socket.io-client": "~1.0.6",
    "xhr2": "^0.1.0"
  },
  "author": {
    "name": "Appbase",
    "url": "http://appbase.io"
  },
  "main": "src/main.js",
  "devDependencies": {
    "socket.io-client": "~1.0.6",
    "xhr2": "^0.1.0",
    "async": "^0.9.0",
    "mocha": "^1.21.5",
    "chai": "^1.9.2",
    "vinyl-transform": "0.0.1",
    "gulp": "^3.8.8",
    "gulp-uglify": "^1.0.1",
    "browserify": "^6.1.0",
    "gulp-rename": "^1.2.0",
    "oauth-js": "git://github.com/oauth-io/oauth-js",
    "gulp-insert": "^0.4.0"
  },
  "scripts": {
    "test": "mocha --check-leaks --timeout 5000",
    "build": "gulp build",
    "test_build": "gulp build_for_test"
  },
  "browser": {
    "xhr2": false
  },
  "readme": "# AppbaseJS\nJavaScript library for Appbase [Appbase.io](http://appbase.io)\nCurrent Version: 2.2.17\n\n## Get Appbase\nNode: `npm install appbasejs`\n\nBrowser: [https://cdn.appbase.io/2.0/appbase.js](https://cdn.appbase.io/2.0/appbase.js)\n\n## Dev\nDo `npm install` inside the folder to install devDependencies.\n\n#### Browser Build\n\n##### Distribution build\n`npm run-script build`: creates _./dist/appbase.min.js_\n\n\n##### Test build\n`npm run-script test_build`: creates _./build/appbase.js_ this build exposes internal server methods, and allows running tests on them in the browser.\n\n#### Testing\n`npm test` for node.\n\nGoto [/test/browser/index.html](http://sids-aquarius.github.io/appbasejs-compact/test/browser) for browser tests. If there's a test build, it will also run tests on internal server methods as well, otherwise will run tests only on interface methods.\n\n## Play\nNode:\n```js\nAppbase = require('appbasejs');\n```\n\nBrowser:\n```html\n<script src=\"./dist/appbase.min.js\"></script>\n```\n\n#### Put Credentials\n```js\nAppbase.credentials('app','secret');\n```\n\n#### Appbase references\nNow let's create two Appbase references under namespaces \"user\" and \"tweets\".\n\n```js\nvar userRef = Appbase.ns(\"user\").v(\"andy\");\nvar tweetRef = Appbase.ns(\"tweet\").v(Appbase.uuid());\n```\n\nAs seen here, one can optionally specify the reference name.\n\n#### Working with Data\n\n```js\nuserRef.setData({\n    status: \"sudo\",\n    location: \"Belo Horizonte, Brazil\"\n});\ntweetRef.setData({\n    message: \"Remember Red, hope is a good thing.\"\n});\n```\n\nNow let's add the tweet as an edge to our user reference.\n\n```js\nuserRef.setEdge(tweetRef, 'tweeted');\n```\n#### Go real-time! \n\nListen to the changes on the user reference data properties and edges, to see the changes we have made so far.\n\n```js\nuserRef.on('properties', function(error, ref, userSnap) {\n    console.log(userSnap.properties().status);\n    console.log(userSnap.properties().location);\n});\nuserRef.on('edge_added', function(error, edgeRef, eSnap) {\n    edgeRef.on('properties', function(error, ref, tweetSnap) {\n        console.log(tweetSnap.properties().message);\n    });\n});\n```\n\n#### Full-text search\n\n```js\nAppbase.ns('tweet').search({text:'hello', properties: ['message']},function(err, array) {\n    console.log(array);\n})\n```\n\n",
  "readmeFilename": "README.md",
  "description": "JavaScript library for Appbase [Appbase.io](http://appbase.io) Current Version: 2.2.17",
  "_id": "appbasejs@2.2.17",
  "dist": {
    "shasum": "ee98d6cd6688a310f21fbad912b6dee23a0c3049"
  },
  "_from": "appbasejs@",
  "_resolved": "https://registry.npmjs.org/appbasejs/-/appbasejs-2.2.17.tgz"
}
